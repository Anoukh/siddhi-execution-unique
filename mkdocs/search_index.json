{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-execution-unique\n\n\n\n\nNew version of Siddhi v4.0.0 is built in Java 8.\n\n\nLatest Released Version v4.0.0-m18.\n\n\nThis is siddhi-execution-unique extension for stream processor to process unique event streams.\nThis extension has implemented different type of unique windows which hold only unique events based on the given unique key parameter and return current events and expired events.\nA window emits current events when a new event arrives and emits expired events when an existing event has expired from a window.\n\n\nFeatures Supported\n\n\n\n\nUniqueEverWindow\n\n\nA Window that is updated with the latest events based on a unique key parameter. \n      When a new event that arrives has the same value for the unique key parameter as an existing event,\n      the existing event expires, and it is replaced by the later event. \n\n\nUniqueTimeWindowProcessor\n\n\nA sliding time window that holds the latest unique events that arrived\n     during the last window time period. The unique events are determined based on\n     the value for a specified unique key parameter. The window is updated with each event arrival and expiry.\n     When a new event that arrives within a window time period has the same value\n     for the unique key parameter as an existing event in the window,\n     the previous event is replaced by the later event.\n\n\nUniqueTimeBatchWindowProcessor\n\n\nBatch (tumbling) time window that is updated with the latest events based\n     on a unique key parameter. If a new event that arrives within the window time period has a value for\n     the key parameter which matches that of an existing event, the existing event expires and\n     it is replaced by the later event. \n\n\nUniqueLengthWindowProcessor\n\n\nSliding length window that holds the latest window length unique events according\n     to the unique key parameter and gets updated for each event arrival and expiry.\n     When a new event arrives with the key that is already there in the window,\n     then the previous event is expired and new event is kept within the window.\n\n\nUniqueLengthBatchWindowProcessor\n\n\n\n\nBatch (tumbling) window that holds a specified number of latest unique events.\n     The unique events are determined based on the value for a specified unique key parameter.\n     The window is updated for every window length (i.e., for the last set of events of\n     the specified number in a tumbling manner). When a new event that arrives\n     within the a window length has the same value for the unique key parameter\n     as an existing event is the window, the previous event is replaced by the new event.\n\n\n\n\n\n\nUniqueFirstWindowProcessor\n\n\n\n\n\n\nA window that holds only the first unique events that are unique according to the unique\n     key parameter. When a new event arrives with a key that is already in the window, \n     that event is not processed by the window.\n\n\n\n\n\n\nUniqueFirstTimeBatchWindow\n\n\n\n\nBatch (tumbling) window that holds the first unique events that\n    arrive during the window time period. The unique events to be held are selected based \n    on the value for a specified unique key parameter. If a new event arrives with a value for\n    the unique key parameter that is same as that of an existing event in the window,\n    the new event is not processed by the window.\n\n\nUniqueFirstLengthBatchWindowProcessor\n\n\nBatch (tumbling) window that holds a specific number of unique events\n    (depending on which events arrive first). The unique events are selected based on a specific parameter \n    that is considered the unique key. When a new event arrives with a value for the unique key parameter \n    that matches the same of an existing event in the window, that event is not processed by the window.\n\n\nUniqueExternalTimeBatchWindow\n\n\nBatch (tumbling) time window that is determined based on external time\n     (i.e., time stamps specified via an attribute in the events).\n     It holds the latest unique events that arrived during the last window time period.\n     The unique events are determined based on the value for a specified unique key parameter.\n     When a new event arrives within the time window with a value for the unique key parameter\n     that is the same as that of an existing event in the window,\n     the existing event expires and it is replaced by the later event.\n\n\n\n\n#### Prerequisites for using the feature\n - Siddhi Stream should be defined\n\n\n#### Deploying the feature\n Feature can be deploy as a OSGI bundle by putting jar file of component to DAS_HOME/lib directory of DAS 4.0.0 pack. \n\n\nHow to Contribute\n\n\n\n\nSend your bug fixes pull requests to [master branch] \n  (https://github.  com/wso2-extensions/siddhi-execution-unique/tree/master) \n\n\n\n\nContact us\n\n\nSiddhi developers can be contacted via the mailing lists:\n  * Carbon Developers List : dev@wso2.org\n  * Carbon Architecture List : architecture@wso2.org\n\n\nWe welcome your feedback and contribution.\n\n\nWSO2 Smart Analytics Team.\n\n\nAPI Docs:\n\n\n\n\n4.0.2-SNAPSHOT", 
            "title": "Welcome to WSO2 Siddhi IO TCP"
        }, 
        {
            "location": "/#siddhi-execution-unique", 
            "text": "", 
            "title": "siddhi-execution-unique"
        }, 
        {
            "location": "/#new-version-of-siddhi-v400-is-built-in-java-8", 
            "text": "", 
            "title": "New version of Siddhi v4.0.0 is built in Java 8."
        }, 
        {
            "location": "/#latest-released-version-v400-m18", 
            "text": "This is siddhi-execution-unique extension for stream processor to process unique event streams.\nThis extension has implemented different type of unique windows which hold only unique events based on the given unique key parameter and return current events and expired events.\nA window emits current events when a new event arrives and emits expired events when an existing event has expired from a window.", 
            "title": "Latest Released Version v4.0.0-m18."
        }, 
        {
            "location": "/#features-supported", 
            "text": "UniqueEverWindow  A Window that is updated with the latest events based on a unique key parameter. \n      When a new event that arrives has the same value for the unique key parameter as an existing event,\n      the existing event expires, and it is replaced by the later event.   UniqueTimeWindowProcessor  A sliding time window that holds the latest unique events that arrived\n     during the last window time period. The unique events are determined based on\n     the value for a specified unique key parameter. The window is updated with each event arrival and expiry.\n     When a new event that arrives within a window time period has the same value\n     for the unique key parameter as an existing event in the window,\n     the previous event is replaced by the later event.  UniqueTimeBatchWindowProcessor  Batch (tumbling) time window that is updated with the latest events based\n     on a unique key parameter. If a new event that arrives within the window time period has a value for\n     the key parameter which matches that of an existing event, the existing event expires and\n     it is replaced by the later event.   UniqueLengthWindowProcessor  Sliding length window that holds the latest window length unique events according\n     to the unique key parameter and gets updated for each event arrival and expiry.\n     When a new event arrives with the key that is already there in the window,\n     then the previous event is expired and new event is kept within the window.  UniqueLengthBatchWindowProcessor   Batch (tumbling) window that holds a specified number of latest unique events.\n     The unique events are determined based on the value for a specified unique key parameter.\n     The window is updated for every window length (i.e., for the last set of events of\n     the specified number in a tumbling manner). When a new event that arrives\n     within the a window length has the same value for the unique key parameter\n     as an existing event is the window, the previous event is replaced by the new event.    UniqueFirstWindowProcessor    A window that holds only the first unique events that are unique according to the unique\n     key parameter. When a new event arrives with a key that is already in the window, \n     that event is not processed by the window.    UniqueFirstTimeBatchWindow   Batch (tumbling) window that holds the first unique events that\n    arrive during the window time period. The unique events to be held are selected based \n    on the value for a specified unique key parameter. If a new event arrives with a value for\n    the unique key parameter that is same as that of an existing event in the window,\n    the new event is not processed by the window.  UniqueFirstLengthBatchWindowProcessor  Batch (tumbling) window that holds a specific number of unique events\n    (depending on which events arrive first). The unique events are selected based on a specific parameter \n    that is considered the unique key. When a new event arrives with a value for the unique key parameter \n    that matches the same of an existing event in the window, that event is not processed by the window.  UniqueExternalTimeBatchWindow  Batch (tumbling) time window that is determined based on external time\n     (i.e., time stamps specified via an attribute in the events).\n     It holds the latest unique events that arrived during the last window time period.\n     The unique events are determined based on the value for a specified unique key parameter.\n     When a new event arrives within the time window with a value for the unique key parameter\n     that is the same as that of an existing event in the window,\n     the existing event expires and it is replaced by the later event.   #### Prerequisites for using the feature\n - Siddhi Stream should be defined  #### Deploying the feature\n Feature can be deploy as a OSGI bundle by putting jar file of component to DAS_HOME/lib directory of DAS 4.0.0 pack.", 
            "title": "Features Supported"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Send your bug fixes pull requests to [master branch] \n  (https://github.  com/wso2-extensions/siddhi-execution-unique/tree/master)", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Siddhi developers can be contacted via the mailing lists:\n  * Carbon Developers List : dev@wso2.org\n  * Carbon Architecture List : architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#we-welcome-your-feedback-and-contribution", 
            "text": "WSO2 Smart Analytics Team.", 
            "title": "We welcome your feedback and contribution."
        }, 
        {
            "location": "/#api-docs", 
            "text": "4.0.2-SNAPSHOT", 
            "title": "API Docs:"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/", 
            "text": "Unique\n\n\ntimeBatch \n(Window)\n\n\nThis is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event. \n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME|BOOL|DOUBLE\n unique.key, \nINT|LONG\n window.time, \nINT|LONG\n start.time)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunique.key\n\n        \nThe attribute that should be checked for uniqueness.\n\n        \n\n        \nINT\nLONG\nTIME\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n0\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream CseEventStream (symbol string, price float, volume int)\nfrom CseEventStream#window.unique:time(symbol, 1 sec)\nselect symbol, price, volume\ninsert all events into OutputStream ;\n\n\n\n\nThis window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.\n\n\n\never \n(Window)\n\n\nThis is a  window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event.\n\n\n\nSyntax\n\n\never(\nINT|LONG|TIME|BOOL|DOUBLE\n unique.key)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunique.key\n\n        \nThe attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list.\n\n        \n\n        \nINT\nLONG\nTIME\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream LoginEvents (timeStamp long, ip string) ;\nfrom LoginEvents#window.unique:ever(ip)\nselect count(ip) as ipCount, ip \ninsert all events into UniqueIps  ;\n\n\n\n\nThe above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes.\n\n\n\nExample 2\n\n\ndefine stream LoginEvents (timeStamp long, ip string , id string) ;\nfrom LoginEvents#window.unique:ever(ip, id)\nselect count(ip) as ipCount, ip , id \ninsert expired events into UniqueIps  ;\n\n\n\n\nThis query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events (which may have expired with the batch or as a result of being replaced by a newer event) are directed to the uniqueIps output stream.\n\n\n\nlength \n(Window)\n\n\nThis is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window.\n\n\n\nSyntax\n\n\nlength(\nINT|LONG|TIME|BOOL|DOUBLE\n unique.key, \nINT\n window.length)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunique.key\n\n        \nThe attribute that should be checked for uniqueness.\n\n        \n\n        \nINT\nLONG\nTIME\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream CseEventStream (symbol string, price float, volume int)\nfrom CseEventStream#window.unique:length(symbol,10)\nselect symbol, price, volume\ninsert all events into OutputStream ;\n\n\n\n\nIn this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.\n\n\n\nfirstLengthBatch \n(Window)\n\n\nThis is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window.\n\n\n\nSyntax\n\n\nfirstLengthBatch(\nINT|LONG|TIME|BOOL|DOUBLE\n unique.key, \nINT\n window.length)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunique.key\n\n        \nThe attribute that should be checked for uniqueness.\n\n        \n\n        \nINT\nLONG\nTIME\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10)\nselect symbol, price, volume\ninsert all events into OutputStream ;\n\n\n\n\nThe window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nThis is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nINT|LONG|TIME|BOOL|DOUBLE\n unique.key, \nLONG\n time.stamp, \nINT|LONG\n window.time, \nINT\n start.time, \nINT|LONG\n time.out, \nINT|LONG\n replace.time.stamp.with.batch.end.time)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunique.key\n\n        \nThe attribute that should be checked for uniqueness.\n\n        \n\n        \nINT\nLONG\nTIME\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.stamp\n\n        \n The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntime.out\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nreplace.time.stamp.with.batch.end.time\n\n        \nReplaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp.\n\n        \n0\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream LoginEvents (timestamp long, ip string) ;\nfrom LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) \nselect timestamp, ip, count() as total\ninsert into UniqueIps ;\n\n\n\n\nIn this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.\n\n\n\nfirstTimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window.\n\n\n\nSyntax\n\n\nfirstTimeBatch(\nINT|LONG|TIME|BOOL|DOUBLE\n unique.key, \nINT|LONG\n window.time, \nINT|LONG\n start.time)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunique.key\n\n        \nThe attribute that should be checked for uniqueness.\n\n        \n\n        \nINT\nLONG\nTIME\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n0\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream CseEventStream (symbol string, price float, volume int)\nfrom CseEventStream#window.unique:firstTimeBatch(symbol,1 sec)\n select symbol, price, volume\ninsert all events into OutputStream ;\n\n\n\n\nThis will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream \n\n\n\nfirst \n(Window)\n\n\nThis is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window.\n\n\n\nSyntax\n\n\nfirst(\nINT|LONG|TIME|BOOL|DOUBLE\n unique.key)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunique.key\n\n        \nThe attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation\n\n        \n\n        \nINT\nLONG\nTIME\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream LoginEvents (timeStamp long, ip string);\nfrom LoginEvents#window.unique:first(ip)\ninsert into UniqueIps ;\n\n\n\n\nThis returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.\n\n\n\ntime \n(Window)\n\n\nThis is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME|BOOL|DOUBLE\n unique.key, \nINT|LONG\n window.time)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunique.key\n\n        \nThe attribute that should be checked for uniqueness. \n\n        \n\n        \nINT\nLONG\nTIME\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream CseEventStream (symbol string, price float, volume int)\nfrom CseEventStream#window.unique:time(symbol, 1 sec)\nselect symbol, price, volume\ninsert expired events into OutputStream ;\n\n\n\n\nIn this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.\n\n\n\nlengthBatch \n(Window)\n\n\nThis is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT|LONG|TIME|BOOL|DOUBLE\n unique.key, \nINT\n window.length)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunique.key\n\n        \nThe attribute that should be checked for uniqueness.\n\n        \n\n        \nINT\nLONG\nTIME\nBOOL\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10)\nselect symbol, price, volume\ninsert expired events into OutputStream ;\n\n\n\n\nIn this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.", 
            "title": "4.0.2-SNAPSHOT"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#unique", 
            "text": "", 
            "title": "Unique"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#timebatch-window", 
            "text": "This is a batch (tumbling) time window that is updated with the latest events based on a unique key parameter. If a new event that arrives within the window time period has a value for the key parameter which matches that of an existing event, the existing event expires and it is replaced by the later event.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#syntax", 
            "text": "timeBatch( INT|LONG|TIME|BOOL|DOUBLE  unique.key,  INT|LONG  window.time,  INT|LONG  start.time)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#query-parameters", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         unique.key \n         The attribute that should be checked for uniqueness. \n         \n         INT LONG TIME BOOL DOUBLE \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         0 \n         INT LONG \n         Yes \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#example-1", 
            "text": "define stream CseEventStream (symbol string, price float, volume int)\nfrom CseEventStream#window.unique:time(symbol, 1 sec)\nselect symbol, price, volume\ninsert all events into OutputStream ;  This window holds the latest unique events that arrive from the CseEventStream at a given time, and returns all evens to the OutputStream stream. It is updated every second based on the latest values for the symbol attribute.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#ever-window", 
            "text": "This is a  window that is updated with the latest events based on a unique key parameter. When a new event that arrives, has the same value for the unique key parameter as an existing event, the existing event expires, and it is replaced by the later event.", 
            "title": "ever (Window)"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#syntax_1", 
            "text": "ever( INT|LONG|TIME|BOOL|DOUBLE  unique.key)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#query-parameters_1", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         unique.key \n         The attribute that should be checked for uniqueness.If multiple attributes need to be checked, you can specify them as a comma-separated list. \n         \n         INT LONG TIME BOOL DOUBLE \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#examples_1", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#example-1_1", 
            "text": "define stream LoginEvents (timeStamp long, ip string) ;\nfrom LoginEvents#window.unique:ever(ip)\nselect count(ip) as ipCount, ip \ninsert all events into UniqueIps  ;  The above query determines the latest events arrived from the LoginEvents stream based on the ip attribute. At a given time, all the events held in the window should have a unique value for the ip attribute. All the processed events are directed to the UniqueIps output stream with ip and ipCount attributes.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#example-2", 
            "text": "define stream LoginEvents (timeStamp long, ip string , id string) ;\nfrom LoginEvents#window.unique:ever(ip, id)\nselect count(ip) as ipCount, ip , id \ninsert expired events into UniqueIps  ;  This query determines the latest events to be included in the window based on the ip and id attributes. When the LoginEvents event stream receives a new event of which the combination of values for the ip and id attributes matches that of an existing event in the window, the existing event expires and it is replaced with the new event. The expired events (which may have expired with the batch or as a result of being replaced by a newer event) are directed to the uniqueIps output stream.", 
            "title": "Example 2"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#length-window", 
            "text": "This is a sliding length window that holds the latest window length unique events according to the unique key parameter and gets updated for each event arrival and expiry. When a new event arrives with the key that is already there in the window, then the previous event is expired and new event is kept within the window.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#syntax_2", 
            "text": "length( INT|LONG|TIME|BOOL|DOUBLE  unique.key,  INT  window.length)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#query-parameters_2", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         unique.key \n         The attribute that should be checked for uniqueness. \n         \n         INT LONG TIME BOOL DOUBLE \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#examples_2", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#example-1_2", 
            "text": "define stream CseEventStream (symbol string, price float, volume int)\nfrom CseEventStream#window.unique:length(symbol,10)\nselect symbol, price, volume\ninsert all events into OutputStream ;  In this configuration, the window holds the latest 10 unique events. The latest events are selected based on the symbol attribute. When the CseEventStream receives an event of which the value for the symbol attribute is the same as that of an existing event in the window, the existing event is replaced by the new event. All the events are returned to the OutputStream event stream once an event is expired or added to the window.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#firstlengthbatch-window", 
            "text": "This is a batch (tumbling) window that holds a specific number of unique events (depending on which events arrive first). The unique events are selected based on a specific parameter that is considered as the unique key. When a new event arrives with a value for the unique key parameter that matches the same of an existing event in the window, that event is not processed by the window.", 
            "title": "firstLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#syntax_3", 
            "text": "firstLengthBatch( INT|LONG|TIME|BOOL|DOUBLE  unique.key,  INT  window.length)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#query-parameters_3", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         unique.key \n         The attribute that should be checked for uniqueness. \n         \n         INT LONG TIME BOOL DOUBLE \n         No \n         No \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#examples_3", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#example-1_3", 
            "text": "define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:firstLengthBatch(symbol, 10)\nselect symbol, price, volume\ninsert all events into OutputStream ;  The window in this configuration holds the first unique events from the CseEventStream steam every second, and outputs them all into the the OutputStream stream. All the events in a window during a given second should have a unique value for the symbol attribute.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#externaltimebatch-window", 
            "text": "This is a batch (tumbling) time window that is determined based on external time (i.e., time stamps specified via an attribute in the events). It holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. When a new event arrives within the time window with a value for the unique key parameter that is the same as that of an existing event in the window, the existing event expires and it is replaced by the later event.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#syntax_4", 
            "text": "externalTimeBatch( INT|LONG|TIME|BOOL|DOUBLE  unique.key,  LONG  time.stamp,  INT|LONG  window.time,  INT  start.time,  INT|LONG  time.out,  INT|LONG  replace.time.stamp.with.batch.end.time)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#query-parameters_4", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         unique.key \n         The attribute that should be checked for uniqueness. \n         \n         INT LONG TIME BOOL DOUBLE \n         No \n         No \n     \n     \n         time.stamp \n          The time which the window determines as current time and will act upon, the value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         time.out \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG \n         Yes \n         No \n     \n     \n         replace.time.stamp.with.batch.end.time \n         Replaces the time stamp value (That is pointed by the 2nd parameter) with the corresponding batch end time stamp. \n         0 \n         INT LONG \n         Yes \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#examples_4", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#example-1_4", 
            "text": "define stream LoginEvents (timestamp long, ip string) ;\nfrom LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec) \nselect timestamp, ip, count() as total\ninsert into UniqueIps ;  In this query, the window holds the latest unique events that arrive from the LoginEvent stream during each second. The latest events are determined based on the external time stamp. At a given time, all the events held in the window has a unique values for the ip and monotonically increasing values for timestamp attributes. The events in the window are inserted into the UniqueIps output stream. The system waits for 2 seconds for the arrival of a new event before flushing the current batch.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#firsttimebatch-window", 
            "text": "A batch (tumbling) time window that holds first unique events according to the unique key parameter that have arrived during window time period and gets updated for each window time period. When a new event arrives with a key which is already in the window, that event is not processed by the window.", 
            "title": "firstTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#syntax_5", 
            "text": "firstTimeBatch( INT|LONG|TIME|BOOL|DOUBLE  unique.key,  INT|LONG  window.time,  INT|LONG  start.time)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#query-parameters_5", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         unique.key \n         The attribute that should be checked for uniqueness. \n         \n         INT LONG TIME BOOL DOUBLE \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         0 \n         INT LONG \n         Yes \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#examples_5", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#example-1_5", 
            "text": "define stream CseEventStream (symbol string, price float, volume int)\nfrom CseEventStream#window.unique:firstTimeBatch(symbol,1 sec)\n select symbol, price, volume\ninsert all events into OutputStream ;  This will hold first unique events arrived from the cseEventStream in every second based on the symbolas a batch and out put all events to outputStream", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#first-window", 
            "text": "This is a window that holds only the first unique events that are unique according to the unique key parameter. When a new event arrives with a key that is already in the window, that event is not processed by the window.", 
            "title": "first (Window)"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#syntax_6", 
            "text": "first( INT|LONG|TIME|BOOL|DOUBLE  unique.key)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#query-parameters_6", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         unique.key \n         The attribute that should be checked for uniqueness. If there are more than one parameter to check for uniqueness, it can be specified as an array by comma separation \n         \n         INT LONG TIME BOOL DOUBLE \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#examples_6", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#example-1_6", 
            "text": "define stream LoginEvents (timeStamp long, ip string);\nfrom LoginEvents#window.unique:first(ip)\ninsert into UniqueIps ;  This returns the first unique items that arrive from the LoginEvents stream, and inserts them into the UniqueIps stream. The unique events those with a unique value for the ip attribute.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#time-window", 
            "text": "This is a sliding time window that holds the latest unique events that arrived during the last window time period. The unique events are determined based on the value for a specified unique key parameter. The window is updated with each event arrival and expiry. When a new event that arrives within a window time period has the same value for the unique key parameter as an existing event in the window, the previous event is replaced by the later event.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#syntax_7", 
            "text": "time( INT|LONG|TIME|BOOL|DOUBLE  unique.key,  INT|LONG  window.time)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#query-parameters_7", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         unique.key \n         The attribute that should be checked for uniqueness.  \n         \n         INT LONG TIME BOOL DOUBLE \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#examples_7", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#example-1_7", 
            "text": "define stream CseEventStream (symbol string, price float, volume int)\nfrom CseEventStream#window.unique:time(symbol, 1 sec)\nselect symbol, price, volume\ninsert expired events into OutputStream ;  In this query, the window holds the latest unique events that arrived within the last second from the CseEventStream, and returns the expired events to the OutputStream stream. During any given second, each event in the window should have a unique value for the symbol attribute. If a new event that arrives within the same second has the same value for the symbol attribute as an existing event in the window, the existing event expires.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#lengthbatch-window", 
            "text": "This is a batch (tumbling) window that holds a specified number of latest unique events. The unique events are determined based on the value for a specified unique key parameter. The window is updated for every window length (i.e., for the last set of events of the specified number in a tumbling manner). When a new event that arrives within the a window length has the same value for the unique key parameter as an existing event is the window, the previous event is replaced by the new event.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#syntax_8", 
            "text": "lengthBatch( INT|LONG|TIME|BOOL|DOUBLE  unique.key,  INT  window.length)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#query-parameters_8", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         unique.key \n         The attribute that should be checked for uniqueness. \n         \n         INT LONG TIME BOOL DOUBLE \n         No \n         No \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#examples_8", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.2-SNAPSHOT/#example-1_8", 
            "text": "define window CseEventWindow (symbol string, price float, volume int) from CseEventStream#window.unique:lengthBatch(symbol, 10)\nselect symbol, price, volume\ninsert expired events into OutputStream ;  In this query, the window at any give time holds the last 10 unique events from the CseEventStream stream. Each of the 10 events within the window at a given time has a unique value for the symbol attribute. If a new event has the same value for the symbol attribute as an existing event within the window length, the existing event expires and it is replaced by the new event. The query returns expired individual events as well as expired batches of events to the OutputStream stream.", 
            "title": "Example 1"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}